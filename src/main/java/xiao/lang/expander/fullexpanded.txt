top-level-form	 	=	 	general-top-level-form
                    |	 	(#%expression expr)
                    |       (module id module-path (#%plain-module-begin module-level-form ...))
                    |	 	(begin top-level-form ...)
                    |	 	(begin-for-syntax top-level-form ...)

  module-level-form	=	 	general-top-level-form
                    |	 	(#%provide raw-provide-spec ...)
                    |	 	(begin-for-syntax module-level-form ...)
                    |	 	submodule-form
                    |	 	(#%declare declaration-keyword ...)

  submodule-form	=       (module id module-path (#%plain-module-begin module-level-form ...))
                    |       (module* id module-path (#%plain-module-begin module-level-form ...))
                    |       (module* id #f (#%plain-module-begin module-level-form ...))

  general-top-level-form =	expr
                    |	 	(define-values (id ...) expr)
                    |	 	(define-syntaxes (id ...) expr)
                    |	 	(#%require raw-require-spec ...)

  expr	 	        =	 	id
                    |	 	(#%plain-lambda formals expr ...+)
                    |	 	(case-lambda (formals expr ...+) ...)
                    |	 	(if expr expr expr)
                    |	 	(begin expr ...+)
                    |	 	(begin0 expr expr ...)
                    |       (let-values ([(id ...) expr] ...) expr ...+)
                    |       (letrec-values ([(id ...) expr] ...) expr ...+)
                    |	 	(set! id expr)
                    |	 	(quote datum)
                    |	 	(quote-syntax datum)
                    |	 	(quote-syntax datum #:local)
                    |	 	(with-continuation-mark expr expr expr)
                    |	 	(#%plain-app expr ...+)
                    |	 	(#%top . id)
                    |	 	(#%variable-reference id)
                    |	 	(#%variable-reference (#%top . id))
                    |	 	(#%variable-reference)

  formals	 	    =	 	(id ...)
                    |	 	(id ...+ . id)
                    |	 	id

(begin top-level-form ...)
(define-values (id ...) expr)
(define-syntaxes (id ...) expr)

id
(#%plain-lambda formals expr ...+)
(case-lambda (formals expr ...+) ...)
(if expr expr expr)
(begin expr ...+)
(begin0 expr expr ...)
(let-values ([(id ...) expr] ...) expr ...+)
(letrec-values ([(id ...) expr] ...) expr ...+)
(set! id expr)
(quote datum)
(quote-syntax datum)
(quote-syntax datum #:local)
(with-continuation-mark expr expr expr)
(#%plain-app expr ...+)

(id ...)
(id ...+ . id)